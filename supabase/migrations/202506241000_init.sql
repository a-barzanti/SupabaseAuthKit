-- Custom types
create type public.app_permission as enum ('profiles.view', 'profiles.update');
create type public.app_role as enum ('admin', 'user');

-- Profiles Table
create table public.profiles (
  id          uuid primary key references auth.users(id) on delete cascade not null, -- UUID from auth.users
  username    text
);
comment on table public.profiles is 'Profile data for each user.';
comment on column public.profiles.id is 'References the internal Supabase Auth user.';

-- User Roles - 1 user â†’ 1 role, to change 'unique (user_id)' -> 'unique (user_id, role)'
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references auth.users(id) on delete cascade not null,
  role      app_role not null,
  unique (user_id)
);
comment on table public.user_roles is 'Application role(s) for each user.';

-- Role Permissions
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';

-- authorize with role-based access control (RBAC)
create function public.authorize(
  requested_permission app_permission
)
returns boolean as $$
declare
  bind_permissions int;
begin
  select count(*)
  from public.role_permissions
  where role_permissions.permission = authorize.requested_permission
    and role_permissions.role = (auth.jwt() ->> 'user_role')::public.app_role
  into bind_permissions;
  
  return bind_permissions > 0;
end;
$$ language plpgsql security definer set search_path = '';

-- Row Level Security
alter table public.profiles enable row level security;
alter table public.user_roles enable row level security;

-- Profiles policies
create policy "Profile view policy"
on public.profiles
for select
to authenticated
using (
  (select auth.uid()) = id
  or authorize('profiles.view')
);

create policy "Profile update policy"
on public.profiles
for update
to authenticated
using (
  (select auth.uid()) = id
  or authorize('profiles.update')
);

-- Send "previous data" on change 
alter table public.profiles replica identity full; 
